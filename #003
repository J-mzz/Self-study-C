class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int l=0, r=0, len=0;
        unordered_map<char, int> m;
        while(r<s.size()){
            if(m.find(s[r]) != m.end())
                l = max(l, m[s[r]]+1);        //--> same as window: if you find the current character is already in map
            m[s[r]] = r;                      //                    the left window will jump to the the character that is next to
            len = max(len, r-l+1);            //                    the last find current character.
            r++;
        }
        return len;
    }
};
